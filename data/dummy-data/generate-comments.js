const AWS = require('aws-sdk');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs');

const dynamodb = new AWS.DynamoDB.DocumentClient({ region: 'us-east-1' });

// Korean comment templates
const COMMENT_TEMPLATES = [
    'Ï†ïÎßê Ï°∞Ïö©ÌïòÍ≥† Ï¢ãÏùÄ Í≥≥Ïù¥ÎÑ§Ïöî! ÏûêÏ£º Ïò¨ Í≤É Í∞ôÏïÑÏöî.',
    'ÏÜåÏùåÏù¥ Í±∞Ïùò ÏóÜÏñ¥ÏÑú ÏßëÏ§ëÌïòÍ∏∞ Îî± Ï¢ãÏäµÎãàÎã§.',
    'Î∂ÑÏúÑÍ∏∞Í∞Ä ÎÑàÎ¨¥ Ï¢ãÏïÑÏöî. ÌûêÎßÅÎêòÎäî Í≥µÍ∞ÑÏù¥ÏóêÏöî.',
    'ÌòºÏûê ÏôÄÏÑú Ï±Ö ÏùΩÍ∏∞Ïóê ÏôÑÎ≤ΩÌïú Ïû•ÏÜåÏûÖÎãàÎã§.',
    'ÎèÑÏã¨ ÏÜçÏóêÏÑú Ïù¥Îü∞ Ï°∞Ïö©Ìïú Í≥≥ÏùÑ Ï∞æÍ∏∞ Ïñ¥Î†§Ïö¥Îç∞ Í∞êÏÇ¨Ìï¥Ïöî.',
    'Ïä§Ìä∏Î†àÏä§Í∞Ä ÌôïÏã§Ìûà ÌíÄÎ¶¨Îäî Í≥≥Ïù¥ÏóêÏöî. Ï∂îÏ≤ú!',
    'ÏÇ¨ÎûåÏù¥ ÎßéÏßÄ ÏïäÏïÑÏÑú Ïó¨Ïú†Î°≠Í≤å ÏãúÍ∞Ñ Î≥¥ÎÇº Ïàò ÏûàÏñ¥Ïöî.',
    'Ï°∞Ïö©Ìïú ÏùåÏïÖÍ≥º Ìï®Íªò Ìé∏ÏïàÌïú ÏãúÍ∞ÑÏùÑ Î≥¥ÎÉàÏäµÎãàÎã§.',
    'ÏÉùÍ∞Å Ï†ïÎ¶¨ÌïòÍ∏∞Ïóê Ï†ïÎßê Ï¢ãÏùÄ Í≥µÍ∞ÑÏù¥ÎÑ§Ïöî.',
    'ÏÜåÏùåÏóê ÎØºÍ∞êÌïú Ï†ÄÏóêÍ≤åÎäî Ï≤úÍµ≠ Í∞ôÏùÄ Í≥≥Ïù¥ÏóêÏöî.',
    'ÌèâÌôîÎ°úÏö¥ Î∂ÑÏúÑÍ∏∞Í∞Ä ÎßàÏùåÏùÑ Ìé∏ÏïàÌïòÍ≤å Ìï¥Ï§çÎãàÎã§.',
    'ÏßëÏ§ëÏù¥ ÌïÑÏöîÌï† Îïå Ï∞æÎäî ÎÇòÎßåÏùò ÎπÑÎ∞Ä Ïû•ÏÜåÍ∞Ä Îê† Í≤É Í∞ôÏïÑÏöî.',
    'Ï°∞Ïö©ÌïòÎ©¥ÏÑúÎèÑ ÏïÑÎäëÌïú Î∂ÑÏúÑÍ∏∞Í∞Ä ÏùºÌíàÏûÖÎãàÎã§.',
    'ÎèÑÏãúÏùò ÏÜåÏùåÏóêÏÑú Î≤óÏñ¥ÎÇò ÌûêÎßÅÌï† Ïàò ÏûàÏñ¥Ïöî.',
    'ÍπîÎÅîÌïòÍ≥† Ï°∞Ïö©Ìï¥ÏÑú ÎßàÏùåÏù¥ Ìé∏ÏïàÌï¥Ï†∏Ïöî.',
    'Ïó¨Í∏∞ÏÑú Î≥¥ÎÇ∏ ÏãúÍ∞ÑÏù¥ Ï†ïÎßê ÏÜåÏ§ëÌñàÏäµÎãàÎã§.',
    'Ï°∞Ïö©Ìï®Ïùò ÏßÑÏ†ïÌïú ÏùòÎØ∏Î•º ÎäêÎÇÑ Ïàò ÏûàÎäî Í≥≥Ïù¥ÏóêÏöî.',
    'Ìé∏ÏïàÌïú ÏùòÏûêÏôÄ Ï°∞Ïö©Ìïú ÌôòÍ≤ΩÏù¥ ÏôÑÎ≤ΩÌï¥Ïöî.',
    'Ïä§ÎßàÌä∏Ìè∞ ÏóÜÏù¥ÎèÑ Ï∂©Î∂ÑÌûà Ï¶êÍ∏∏ Ïàò ÏûàÎäî Í≥µÍ∞ÑÏûÖÎãàÎã§.',
    'ÏûêÏó∞Ïä§ÎüΩÍ≤å ÎßàÏùåÏù¥ Ï∞®Î∂ÑÌï¥ÏßÄÎäî Í≥≥Ïù¥ÎÑ§Ïöî.',
    'Ï°∞Ïö©Ìïú Î∂ÑÏúÑÍ∏∞ ÎçïÎ∂ÑÏóê ÍπäÏùÄ ÏÇ¨ÏÉâÏùÑ Ìï† Ïàò ÏûàÏóàÏñ¥Ïöî.',
    'ÏÜåÏùå Í±±Ï†ï ÏóÜÏù¥ Ìé∏ÏïàÌïòÍ≤å Ïâ¥ Ïàò ÏûàÏñ¥ÏÑú Ï¢ãÏïÑÏöî.',
    'Ïù¥Îü∞ Í≥≥Ïù¥ Îçî ÎßéÏïÑÏ°åÏúºÎ©¥ Ï¢ãÍ≤†Ïñ¥Ïöî.',
    'ÏπúÍµ¨Îì§ÏóêÍ≤åÎèÑ Íº≠ Ï∂îÏ≤úÌïòÍ≥† Ïã∂ÏùÄ Ïû•ÏÜåÏûÖÎãàÎã§.',
    'Ï°∞Ïö©ÌïòÍ≥† Íπ®ÎÅóÌï¥ÏÑú ÏûêÏ£º Ïò§Í≤å Îê† Í≤É Í∞ôÏïÑÏöî.',
    'ÌèâÏò®Ìï®ÏùÑ Ï∞æÍ≥† ÏûàÎã§Î©¥ Ïù¥Í≥≥ÏùÑ Ï∂îÏ≤úÌï¥Ïöî.',
    'ÏÜåÏùå Î†àÎ≤®Ïù¥ ÎÇÆÏïÑÏÑú Ï†ïÎßê ÎßåÏ°±Ïä§ÎüΩÏäµÎãàÎã§.',
    'ÌòºÏûêÎßåÏùò ÏãúÍ∞ÑÏùÑ Í∞ñÍ∏∞Ïóê Îî± Ï¢ãÏùÄ Í≥≥Ïù¥ÏóêÏöî.',
    'Î∂ÑÏúÑÍ∏∞ ÏûàÎäî Ï°∞Î™ÖÍ≥º Ï°∞Ïö©Ìïú ÌôòÍ≤ΩÏù¥ ÏµúÍ≥†ÏòàÏöî.',
    'ÎßàÏùåÏùò ÌèâÌôîÎ•º Ï∞æÏùÑ Ïàò ÏûàÎäî ÏÜåÏ§ëÌïú Í≥µÍ∞ÑÏûÖÎãàÎã§.',
    'Ï°∞Ïö©Ìïú ÏùåÏïÖÏù¥ ÌùòÎü¨ÎÇòÏôÄÏÑú ÎçîÏö± Ìé∏ÏïàÌï¥Ïöî.',
    'ÎèÑÏã¨ ÏÜç Ïò§ÏïÑÏãúÏä§ Í∞ôÏùÄ Í≥≥Ïù¥ÎÑ§Ïöî.',
    'ÏßëÏ§ëÎ†•Ïù¥ ÌïÑÏöîÌïú ÏûëÏóÖÏùÑ Ìï† Îïå ÏµúÏ†ÅÏùò Ïû•ÏÜåÏòàÏöî.',
    'Ï°∞Ïö©ÌïòÎ©¥ÏÑúÎèÑ Îî∞ÎúªÌïú Î∂ÑÏúÑÍ∏∞Í∞Ä Ï¢ãÏïÑÏöî.',
    'ÏÜåÏùåÏóê ÏòàÎØºÌïú Î∂ÑÎì§Íªò Í∞ïÎ†• Ï∂îÏ≤úÌï©ÎãàÎã§.',
    'ÌèâÌôîÎ°úÏö¥ ÏãúÍ∞ÑÏùÑ Î≥¥ÎÇº Ïàò ÏûàÏñ¥ÏÑú Í∞êÏÇ¨Ìï¥Ïöî.',
    'Ï°∞Ïö©Ìï® ÏÜçÏóêÏÑú ÏßÑÏ†ïÌïú Ìú¥ÏãùÏùÑ Ï∑®Ìï† Ïàò ÏûàÏñ¥Ïöî.',
    'Ïù¥Í≥≥ÏóêÏÑúÏùò ÏãúÍ∞ÑÏù¥ Ï†ïÎßê ÏÜåÏ§ëÌïòÍ≥† ÏùòÎØ∏ÏûàÏóàÏñ¥Ïöî.',
    'Ï°∞Ïö©Ìïú ÌôòÍ≤Ω ÎçïÎ∂ÑÏóê ÎßàÏùåÏù¥ Ï†ïÌôîÎêòÎäî ÎäêÎÇåÏù¥ÏóêÏöî.',
    'ÏÜåÏùå ÏóÜÎäî ÌèâÏò®Ìïú Í≥µÍ∞ÑÏùÑ Ï∞æÍ≥† ÏûàÎã§Î©¥ Ïó¨Í∏∞ÏòàÏöî!',
    'Ï†ïÎßê Ï¢ãÎÑ§Ïöî! Îã§ÏùåÏóêÎèÑ Íº≠ Ïò¨Í≤åÏöî.',
    'ÏÉùÍ∞ÅÎ≥¥Îã§ Îçî Ï°∞Ïö©ÌïòÍ≥† Ï¢ãÏïòÏñ¥Ïöî.',
    'ÏôÑÏ†Ñ ÌûêÎßÅ Í≥µÍ∞ÑÏù¥ÏóêÏöî. Í∞ïÏ∂î!',
    'Ï°∞Ïö©Ìï¥ÏÑú Ï¢ãÍ∏¥ ÌïúÎç∞ Ï¢Ä Îçî Î∞ùÏïòÏúºÎ©¥ Ïñ¥Îñ®ÍπåÏöî?',
    'Î∂ÑÏúÑÍ∏∞Îäî Ï¢ãÏùÄÎç∞ ÏùòÏûêÍ∞Ä Ï¢Ä Î∂àÌé∏Ìï¥Ïöî.',
    'Ï†ÑÏ≤¥Ï†ÅÏúºÎ°ú ÎßåÏ°±Ïä§ÎüΩÏßÄÎßå Í∞ÄÍ≤©Ïù¥ Ï°∞Í∏à ÏïÑÏâ¨ÏõåÏöî.',
    'Ï°∞Ïö©ÌïòÍ∏¥ ÌïúÎç∞ ÎÑàÎ¨¥ Ï°∞Ïö©Ìï¥ÏÑú Ïò§ÌûàÎ†§ Ïñ¥ÏÉâÌñàÏñ¥Ïöî.',
    'Ï¢ãÏùÄ Í≥≥Ïù¥ÏßÄÎßå Ï†ëÍ∑ºÏÑ±Ïù¥ Ï¢Ä ÏïÑÏâΩÎÑ§Ïöî.',
    'Î∂ÑÏúÑÍ∏∞ Ï¢ãÍ≥† Ï°∞Ïö©ÌïúÎç∞ ÌôîÏû•Ïã§Ïù¥ Ï¢Ä Î©ÄÏñ¥Ïöî.',
    'ÎåÄÏ≤¥Î°ú ÎßåÏ°±ÌïòÏßÄÎßå Ï£ºÏ∞®Í∞Ä Ïñ¥Î†§ÏõåÏöî.'
];

// Korean nicknames for comments
const COMMENT_NICKNAMES = [
    'Ï°∞Ïö©Ìï®Ï∂îÍµ¨Ïûê', 'ÌèâÌôîÎ°úÏö¥ÎßàÏùå', 'ÌûêÎßÅÎü¨Î≤Ñ', 'Í≥†ÏöîÌïúÏòÅÌòº', 'ÏûîÏûîÌïúÎ∞îÎã§',
    'Îî∞ÎúªÌïúÌñáÏÇ¥', 'Î∂ÄÎìúÎü¨Ïö¥Î∞îÎûå', 'ÎßëÏùÄÌïòÎäò', 'Ìè¨Í∑ºÌïúÎßàÏùå', 'Îã¨ÏΩ§ÌïúÌú¥Ïãù',
    'Ï°∞Ïö©ÌïúÎèÖÏÑúÍ∞Ä', 'ÌèâÏò®ÌïúÏãúÍ∞Ñ', 'Í≥†ÏöîÌïúÏïÑÏπ®', 'ÏûîÏûîÌïúÏò§ÌõÑ', 'Îî∞ÎúªÌïúÏ†ÄÎÖÅ',
    'Î∂ÄÎìúÎü¨Ïö¥Ï°∞Î™Ö', 'ÎßëÏùÄÍ≥µÍ∏∞', 'Ìè¨Í∑ºÌïúÍ≥µÍ∞Ñ', 'Îã¨ÏΩ§ÌïúÍøà', 'Ï°∞Ïö©ÌïúÏÇ∞Ï±ÖÏûê',
    'ÌèâÌôîÏ£ºÏùòÏûê', 'ÌûêÎßÅÏ†ÑÎ¨∏Í∞Ä', 'Í≥†ÏöîÌï®Îß§ÎãàÏïÑ', 'ÏûîÏûîÌï®Ïï†Ìò∏Í∞Ä', 'Îî∞ÎúªÌï®Ï∂îÍµ¨Ïûê',
    'Î∂ÄÎìúÎü¨ÏõÄÏÑ†Ìò∏Ïûê', 'ÎßëÏùåÏßÄÌñ•Ïûê', 'Ìè¨Í∑ºÌï®Îü¨Î≤Ñ', 'Îã¨ÏΩ§Ìï®Ï∂îÍµ¨Ïûê', 'Ï°∞Ïö©Ìï®ÎßàÎãàÏïÑ'
];

async function getSpotIds() {
    const result = await dynamodb.scan({
        TableName: 'Spots',
        ProjectionExpression: 'id'
    }).promise();
    return result.Items.map(item => item.id);
}

async function getUserIds() {
    const result = await dynamodb.scan({
        TableName: 'Users',
        ProjectionExpression: 'id'
    }).promise();
    return result.Items.map(item => item.id);
}

async function generateComments(spotIds, userIds) {
    const comments = [];
    
    for (let i = 0; i < 150; i++) {
        const spotId = spotIds[Math.floor(Math.random() * spotIds.length)];
        const content = COMMENT_TEMPLATES[Math.floor(Math.random() * COMMENT_TEMPLATES.length)];
        const nickname = COMMENT_NICKNAMES[Math.floor(Math.random() * COMMENT_NICKNAMES.length)];
        
        // Always assign a user_id (NOT NULL)
        const userId = userIds[Math.floor(Math.random() * userIds.length)];
        
        const createdAt = new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000).toISOString(); // Last 3 months
        
        const comment = {
            id: uuidv4(),
            spot_id: spotId,
            user_id: userId, // Always NOT NULL
            nickname: nickname,
            content: content,
            created_at: createdAt
        };
        
        comments.push(comment);
    }
    
    // Sort by created_at for better data distribution
    comments.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));
    
    return comments;
}

async function insertComments(comments) {
    const batchSize = 25;
    
    for (let i = 0; i < comments.length; i += batchSize) {
        const batch = comments.slice(i, i + batchSize);
        
        const params = {
            RequestItems: {
                'Comments': batch.map(comment => ({
                    PutRequest: {
                        Item: comment
                    }
                }))
            }
        };
        
        try {
            await dynamodb.batchWrite(params).promise();
            console.log(`Inserted comments batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(comments.length / batchSize)}`);
        } catch (error) {
            console.error('Error inserting comments batch:', error);
        }
    }
}

async function main() {
    try {
        console.log('Getting spot IDs...');
        const spotIds = await getSpotIds();
        
        if (spotIds.length === 0) {
            throw new Error('No spots found. Please run generate-spots.js first.');
        }
        
        console.log('Getting user IDs...');
        const userIds = await getUserIds();
        
        if (userIds.length === 0) {
            throw new Error('No users found. Please run generate-users.js first.');
        }
        
        console.log(`Found ${spotIds.length} spots and ${userIds.length} users`);
        console.log('Generating 150 dummy comments (all with user_id NOT NULL)...');
        const comments = await generateComments(spotIds, userIds);
        
        console.log('Inserting comments into DynamoDB...');
        await insertComments(comments);
        
        console.log('‚úÖ Successfully inserted 150 dummy comments!');
        
        // Save to JSON file for reference
        fs.writeFileSync('./comments-dummy-data.json', JSON.stringify(comments, null, 2));
        console.log('üìÑ Saved dummy data to comments-dummy-data.json');
        
        // Generate statistics
        const commentsBySpot = {};
        comments.forEach(comment => {
            commentsBySpot[comment.spot_id] = (commentsBySpot[comment.spot_id] || 0) + 1;
        });
        
        const avgCommentsPerSpot = Object.values(commentsBySpot).reduce((a, b) => a + b, 0) / Object.keys(commentsBySpot).length;
        console.log(`üìä Average comments per spot: ${avgCommentsPerSpot.toFixed(1)}`);
        console.log(`üìä Spots with comments: ${Object.keys(commentsBySpot).length}/${spotIds.length}`);
        console.log(`üìä All comments have user_id: ${comments.every(c => c.user_id) ? 'YES' : 'NO'}`);
        
    } catch (error) {
        console.error('‚ùå Error:', error);
    }
}

main();
